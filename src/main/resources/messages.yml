welcome:
|
  @|bold Welcome to the elasticshell|@
bye:
  |

  bye
prompt: '> '

help:

  exit:
  |
    Quits the elasticshell

  help:
  |
    This is the elasticshell, a  shell for elasticsearch
    For information about elasticsearch, visit http://elasticsearch.org

    You can either write Java or JavaScript code in here.
    Every command is exposed as a JavaScript function, therefore in order to run a command you need to type its name followed by the round brackets (and eventual arguments between them)
    e.g. exit()

    In order to get help for a specific command, just type its name (without the brackets)
    e.g. exit

    The elasticshell comes with nice auto-suggestions, available pressing the tab key, which will show as a result a list of all the commands and objects available in the current context.

    The following are the available commands (with example arguments)
       exit() or quit()                   Quits the elasticshell
       help()                             Display this help message
       history()                          Displays the history
       httpDelete(url)                    Sends a DELETE http request
       httpGet(url)                       Sends a GET http request
       httpHead(url)                      Sends a HEAD http request
       httpPost(url, body)                Sends a POST http request
       httpPut(url, body)                 Sends a PUT http request
       importClass(java.util.Date)        Imports a Java class
       importPackage(java.util)           Imports a Java package
       load('./scripts/elastic.js')       Loads external Javascript source files
       nodeClient('elasticsearch')        Creates a new node client given
                                          the cluster name to connect to
       localNode('elasticsearch')         Creates a new local node given
                                          the name of the cluster to join
       print(es)                          Prints out the string representation
                                          of the provided arguments
       save(json, 'output.json')          Saves the string representation
                                          of any object to file
       toJson(facetBuilder)               Converts to json object the given
                                          argument if possible
       transportClient('localhost:9300')  Creates a new transport client given
                                          the address of the node to connect to
       version()                          Prints out the current version

  history:
  |
    Displays all the entries available in the history

  httpDelete:
  |
    Sends an http DELETE request to the specified urland returns the response.

    The following command will delete a document from elasticsearch using the DELETE api
    httpDelete('http://localhost:9200/twitter/tweet/1');

  httpGet:
  |
    Sends an http GET request to the specified urland returns the response.

    The following command will retrieve a document from elasticsearch using the get api
    var res = httpGet('http://localhost:9200/twitter/tweet/1');
    var doc = res.content();

  httpHead:
  |
    Sends an http HEAD request to the specified urland returns the response.

    The following command will check if a document exists within elasticsearch using the get api
    httpHead('http://localhost:9200/twitter/tweet/1');

  httpPost:
  |
    Sends an http POST request to the specified url and returns the response.

    The following command will update an existing document within elasticsearch using the update api
    httpPost('http://localhost:9200/twitter/tweet/1/_update', '{"doc":{"retweets":10}}');

    You can either provide the request body as a string like in the example above or specify more parameters as key value pairs using the HttpParameters helper class like this
    var params = HttpParameters.builder().add('foo', 'bla').add('bar', 'bla');
    httpPost('http://host:8080', params);

  httpPut:
  |
    Sends an http PUT request to the specified url and returns the response.

    The following command will index a document within elasticsearch using the index api
    httpPut('http://localhost:9200/twitter/tweet/1', '{"content":"#elasticsearch rocks"}');

    You can either provide the request body as a string like in the example above or specify more parameters as key value pairs using the HttpParameters helper class like this
    var params = HttpParameters.builder().add('foo', 'bla').add('bar', 'bla');
    httpPut('http://host:8080', params);

  load:
  |
    Loads the JavaScript source files named by string arguments.
    You can either provide an absolute path like this
    load('/opt/elasticshell/scripts/elastic.js')

    or a path relative to the elasticshell location
    load('./scripts/elastic.js')

    If multiple arguments are given, each file is read and executed in turn.

  localNode:
  |
    Creates (and starts) a new elasticsearch local node using the Java API.
    The node is local on the JVM level, meaning that two local servers started within the shell will discover themselves and form a cluster. The created local node holds data.

    The following command with no arguments will create a new local node that joins (or creates) a cluster called [elasticsearch]
    node = localNode();

    The following command with a string argument will create a local node that joins (or creates) a cluster with the given name [elasticshell]
    node = localNode('elasticshell');

    You can obtain a client from the node just using the client() method
    es = node.client();

  nodeClient:
  |
    Creates a new elasticsearch node client using the Java API.
    (http://www.elasticsearch.org/guide/reference/java-api/client.html)

    The following command with no arguments will create a new node client connected to the cluster with name elasticsearch
    es = nodeClient();

    The following command with a string argument will create a new node client connected to the cluster with name es-cluster
    es = nodeClient('es-cluster');

  toJson:
  |
    Converts to json the argument provided.
    The argument can be either a String or a ToXContent elasticsearch object.

    Executing the command with a String as input like this
    toJson('here goes your string');

    will have the same result as executing the following standard line
    JSON.parse('here goes your string');

    When providing a ToXContent object as input, the command will have the same result as converting it to a String and parsing it as json.
    The command is particularly useful when the ToXContent object doesn't override the toString method, which usually outputs the json as string.

    var termsFacetBuilder = FacetBuilders.termsFacet('facet name').field('field');
    var termsFacet = toJson(termsFacetBuilder);

  print:
  |
    Prints out the string representation of the provided arguments

  save:
  |
    Saves to file the string representation of the provided argument. Useful with big json objects for instance.
    The default location where the file is saved is ./output/output.txt but it's possible to provide the file path as the second argument.
    Consecutive save command executions to the same file will append content it.

  transportClient:
  |
    Creates a new elasticsearch transport client using the Java API.
    (http://www.elasticsearch.org/guide/reference/java-api/client.html)

    The following command with no arguments will create a new transport client connected to localhost, port 9300
    es = transportClient();

    The following command with a string argument will create a new transport client connected to es-host, port 9302

    es = transportClient('es-host:9302');

    You can connect to multiple nodes just providing a list of addresses
    es = transportClient('es-host1:9300','es-host2:9300','es-host3:9300');

  version:
  |
    Prints out the current elasticshell version.
    The elasticshell version is tightly coupled to the elasticsearch version, that's why they have the same version number.

  AbstractClient.availableIndices:
  |
    Returns a JSON object containing all the indices available within the current elasticsearch cluster, together with their aliases and types.

  AbstractClient.availableNodes:
  |
    Returns a JSON object containing all the nodes available within the current elasticsearch cluster.

  AbstractClient.bulkBuilder:
  |
    Returns an elasticsearch BulkProcessor.Builder which allows to easily build a new bulk request and configure the number or actions required for its execution, the size of the bulk, the optional time interval and the number of concurrent requests
    (https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java)

    The command below will create a new bulk which will be automatically executed as soon as 100 actions have been added to it
    var bulk = es.bulkBuilder().setBulkActions(100).build();

    Here is an example of how you can add an index request to the bulk
    bulk.add(Requests.indexRequest('twitter').type('tweet').id('1').source({content:"elasticsearch rocks"}));

  AbstractClient.bulk:
  |
    Returns an elasticsearch BulkProcessor with the default settings (1000 actions, size 5MB, no time interval, 1 concurrent request)
    (https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java)

    The command below will create a new bulk with the default settings
    var bulk = es.bulk();

    Here is an example of how you can add an index request to the bulk
    bulk.add(Requests.indexRequest('twitter').type('tweet').id('1').source({content:"elasticsearch rocks"}));

  AbstractClient.countBuilder:
  |
    Allows to build a count request
    (http://www.elasticsearch.org/guide/reference/api/count/)

    Here is an example
    es.countBuilder().query({"term":{"content":"elasticsearch"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.countBuilder:
  |
    Allows to build a count request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/count/)

    Here is an example
    es.<index>.countBuilder().query({"term":{"content":"elasticsearch"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.countBuilder:
  |
    Allows to build a count request for a specific type
    (http://www.elasticsearch.org/guide/reference/api/count/)

    Here is an example
    es.<index>.<type>.countBuilder().query({"term":{"content":"elasticsearch"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.count:
  |
    Returns the number of matches for a query using the count API
    (http://www.elasticsearch.org/guide/reference/api/count/)

    You can provide a json query as argument
    es.count({"term":{"content":"elasticsearch"}});

    or no argument to get the total number of documents available.

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.count:
  |
    Returns the number of matches for a query within a specific index
    (http://www.elasticsearch.org/guide/reference/api/count/)

    You can provide a json query as argument
    es.<index>.count({"term":{"content":"elasticsearch"}});

    or no argument to get the total number of documents available within the index.

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.count:
  |
    Returns the number of matches for a query within a specific type
    (http://www.elasticsearch.org/guide/reference/api/count/)

    You can provide a json query as argument
    es.<index>.<type>.count({"term":{"content":"elasticsearch"}});

    or no argument to get the total number of documents available within the type.

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.deleteBuilder:
  |
    Allows to build a delete request
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    Here is an example
    es.deleteBuilder().index('twitter').type('tweet').id('1').execute();

  InternalIndexClient.deleteBuilder:
  |
    Allows to build a delete request
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    Here is an example
    es.<index>.deleteBuilder().type('tweet').id('1').execute();

  InternalTypeClient.deleteBuilder:
  |
    Allows to build a delete request
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    Here is an example
    es.<index>.<type>.deleteBuilder().id('1').execute();

  AbstractClient.delete:
  |
    Deletes a document using the delete API
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    The required arguments are index, type and document id
    es.delete('twitter','tweet','1');

  InternalIndexClient.delete:
  |
    Deletes a document using the delete API
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    The required arguments are type and document id
    es.<index>.delete('tweet','1');

  InternalTypeClient.delete:
  |
    Deletes a document using the delete API
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    The required argument is the id of the document that needs to be deleted
    es.<index>.<type>.delete('1');

  AbstractClient.deleteByQueryBuilder:
  |
    Allows to build a delete by query request
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    Here is an example that executes the query on all indices and deletes the matching documents
    es.deleteByQueryBuilder().query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example that executes the query on the provided indices and deletes the matching documents
    es.deleteByQueryBuilder().indices('index1','index2').query(query).execute();

    Here is an example that executes the query on all indices and deletes the matching documents, where the query is provided using the QueryBuilder helper class
    es.deleteByQueryBuilder().queryBuilder(QueryBuilders.termQuery('user','kimchy')).execute();

  InternalIndexClient.deleteByQueryBuilder:
  |
    Allows to build a delete by query request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    Here is an example that executes the query on the selected index and deletes the matching documents
    es.<index>.deleteByQueryBuilder().query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example that executes the query on all indices and deletes the matching documents, where the query is provided using the QueryBuilder helper class
    es.<index>.deleteByQueryBuilder().queryBuilder(QueryBuilders.termQuery('user','kimchy')).execute();

  InternalTypeClient.deleteByQueryBuilder:
  |
    Allows to build a delete by query request on a specific type
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    Here is an example that executes the query on the selected index and type and deletes the matching documents
    es.<index>.<type>.deleteByQueryBuilder().query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example that executes the query on the selected index and type and deletes the matching documents, where the query is provided using the QueryBuilder helper class
    es.<index>.<type>.deleteByQueryBuilder().queryBuilder(QueryBuilders.termQuery('user','kimchy')).execute();

  AbstractClient.deleteByQuery:
  |
    Deletes all the documents matching a query executed on all indices
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    The required argument is the query, provided as a json object
    es.deleteByQuery({"term":{"user":"kimchy"}});

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.deleteByQuery:
  |
    Deletes all the documents matching a query executed on a specific index
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    The required argument is the query, provided as a json object
    es.<index>.deleteByQuery({"term":{"user":"kimchy"}});

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.deleteByQuery:
  |
    Deletes all the documents matching a query executed on a specific type
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    The required argument is the query, provided as a json object
    es.<index>.<type>.deleteByQuery({"term":{"user":"kimchy"}});

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.explainBuilder:
  |
    Allows to build an explain request
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    Here is an example providing the query as a json object
    es.explainBuilder().index('twitter').type('tweet').id('1').query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example providing the query using the QueryBuilders helper class
    es.explainBuilder().index('twitter').type('tweet').id('1').queryBuilder(QueryBuilder.termQuery('user','kimchy')).execute();

  InternalIndexClient.explainBuilder:
  |
    Allows to build an explain request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    Here is an example providing the query as a json object
    es.<index>.explainBuilder().type('tweet').id('1').query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example providing the query using the QueryBuilders helper class
    es.<index>.explainBuilder().type('tweet').id('1').queryBuilder(QueryBuilder.termQuery('user','kimchy')).execute();

  InternalTypeClient.explainBuilder:
  |
    Allows to build an explain request on a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    Here is an example providing the query as a json object
    es.<index>.<type>.explainBuilder().id('1').query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example providing the query using the QueryBuilders helper class
    es.<index>.<type>.explainBuilder().id('1').queryBuilder(QueryBuilder.termQuery('user','kimchy')).execute();

  AbstractClient.explain:
  |
    Computes a score explanation for a query and a specific document
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    The required arguments are index, type, document id and the query (provided as a json object)
    es.explain('twitter','tweet','1',{"term":{"user":"kimchy"}});

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.explain:
  |
    Computes a score explanation for a query and a specific document
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    The required arguments are type, document id and the query (provided as a json object)
    es.<index>.explain('tweet','1',{"term":{"user":"kimchy"}});

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.explain:
  |
    Computes a score explanation for a query and a specific document
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    The required arguments are document id and the query (provided as a json object)
    es.<index>.<type>.explain('1',{"term":{"user":"kimchy"}});

    The query doesn't need to be typed in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.getBuilder:
  |
    Allows to build a get request
    (http://www.elasticsearch.org/guide/reference/api/get/)

    Here is an example
    es.getBuilder().index('twitter').type('tweet').id('1').execute();

  InternalIndexClient.getBuilder:
  |
    Allows to build a get request
    (http://www.elasticsearch.org/guide/reference/api/get/)

    Here is an example
    es.<index>.getBuilder().type('tweet').id('1').execute();

  InternalTypeClient.getBuilder:
  |
    Allows to build a get request
    (http://www.elasticsearch.org/guide/reference/api/get/)

    Here is an example
    es.<index>.<type>.getBuilder().id('1').execute();

  AbstractClient.get:
  |
    Retrieves a document by id using the get api
    (http://www.elasticsearch.org/guide/reference/api/get/)

    The required arguments are index, type and document id
    es.get('twitter','tweet','1');

  InternalIndexClient.get:
  |
    Retrieves a document by id using the get api
    (http://www.elasticsearch.org/guide/reference/api/get/)

    The required arguments are type and document id
    es.<index>.get('tweet','1');

  InternalTypeClient.get:
  |
    Retrieves a document by id using the get api
    (http://www.elasticsearch.org/guide/reference/api/get/)

    The required argument is the document id
    es.<index>.<type>.get('1');

  AbstractClient.indexBuilder:
  |
    Allows to build an index request
    (http://www.elasticsearch.org/guide/reference/api/index/)

    Here is an example
    es.indexBuilder().index('twitter').type('tweet').id('1').source({"user":"kimchy", "content":"elasticsearch rocks"}).execute();

    The document doesn't need to be typed in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.indexBuilder:
  |
    Allows to build an index request
    (http://www.elasticsearch.org/guide/reference/api/index/)

    Here is an example
    es.<index>.indexBuilder().type('tweet').id('1').source({"user":"kimchy", "content":"elasticsearch rocks"}).execute();

    The document doesn't need to be typed in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.indexBuilder:
  |
    Allows to build an index request
    (http://www.elasticsearch.org/guide/reference/api/index/)

    Here is an example
    es.<index>.<type>.indexBuilder().id('1').source({"user":"kimchy", "content":"elasticsearch rocks"}).execute();

    The document doesn't need to be typed in a single line. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.index:
  |
    Indexes a document using the index api
    (http://www.elasticsearch.org/guide/reference/api/index/)

    The required arguments are index, type, document id and the document (provided as a json object)
    es.index('twitter','tweet','1',{"user":"kimchy", "content":"elasticsearch rocks"});

    The document doesn't need to be typed in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.index:
  |
    Indexes a document using the index api
    (http://www.elasticsearch.org/guide/reference/api/index/)

    The required arguments are type, document id and the document (provided as a json object)
    es.<index>.index('tweet','1',{"user":"kimchy", "content":"elasticsearch rocks"});

    The document doesn't need to be typed in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.index:
  |
    Indexes a document using the index api
    (http://www.elasticsearch.org/guide/reference/api/index/)

    The required arguments are document id and the document (provided as a json object)
    es.<index>.<type>.index('1',{"user":"kimchy", "content":"elasticsearch rocks"});

    The document doesn't need to be typed in a single line. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.multiGetBuilder:
  |
    Allows to build a multi get request
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    Here is an example that retrieves two documents with a single request
    es.multiGetBuilder().add('twitter','tweet','1','2').execute();

    Using the builder you can retrieve multiple documents from different indexes or types too
    es.multiGetBuilder().add('twitter','tweet','1').add('blog','trifork','1','2').execute();

  AbstractClient.multiGet:
  |
    Retrieves multiple documents by id using the multi get api
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    The required arguments are index, type and the ids of the document to retrieve
    es.multiGet('twitter','tweet','1','2','3');

  InternalIndexClient.multiGet:
  |
    Retrieves multiple documents by id using the multi get api
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    The required arguments are type and the ids of the document to retrieve
    es.<index>.multiGet('tweet','1','2','3');

  InternalTypeClient.multiGet:
  |
    Retrieves multiple documents by id using the multi get api
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    The required arguments are the ids of the document to retrieve
    es.<index>.<type>.multiGet('1','2','3');

  AbstractClient.multiSearchBuilder:
  |
    Allows to build a multi search request
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    Here is an example that sends two queries in a single request
    es.multiSearchBuilder().add({"query":{"term":{"user":"kimchy"}}}).add({"query":{"term":{"user":"s1monw"}}}).execute();

    You can either use a json query or the Java API SearchRequest (or SearchSourceBuilder) object
    es.multiSearchBuilder().add(SearchSourceBuilder.searchSource().query(QueryBuilders.termQuery('user','kimchy'))).add({"query":{"term":{"user":"s1monw"}}}).execute()

  AbstractClient.multiSearch:
  |
    Executes multiple searches in a single request
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    Here is an example that sends two queries in a single request
    es.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

  InternalIndexClient.multiSearch:
  |
    Executes multiple searches in a single request
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    Here is an example that sends two queries in a single request
    es.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

  InternalIndexClient.multiSearch:
  |
    Executes multiple searches in a single request, within a specific index
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    Here is an example that sends two queries in a single request
    es.<index>.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

  InternalTypeClient.multiSearch:
  |
    Executes multiple searches in a single request, within a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    Here is an example that sends two queries in a single request
    es.<index>.<type>.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

  AbstractClient.moreLikeThis:
  |
    Executes a more like this request
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.moreLikeThis('twitter','tweet','1');

  AbstractClient.moreLikeThisBuilder:
  |
    Allows to build a more like this request
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.moreLikeThisBuilder('twitter').type('tweet').id('1').minTermFreq(1).minDocFreq(1).execute();

  InternalIndexClient.moreLikeThis:
  |
    Executes a more like this request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.<index>.moreLikeThis('tweet','1');

  InternalIndexClient.moreLikeThisBuilder:
  |
    Allows to build a more like this request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.<index>.moreLikeThisBuilder().type('tweet').id('1').minTermFreq(1).minDocFreq(1).execute();

  InternalTypeClient.moreLikeThis:
  |
    Executes a more like this request on a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.<index>.<type>.moreLikeThis('1');

  InternalTypeClient.moreLikeThisBuilder:
  |
    Allows to build a more like this request on a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.<index>.<type>.moreLikeThisBuilder().id('1').minTermFreq(1).minDocFreq(1).execute();

  AbstractClient.percolate:
  |
    Sends a percolate request
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    Here is an example
    es.percolate('test','type1', {"doc":{"field1":"value1"}});

  AbstractClient.percolateBuilder:
  |
    Allows to build a percolate request
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    Here is an example
    es.percolateBuilder().index('test').type('type1').source(doc).preferLocal(true).execute();

  InternalIndexClient.percolate:
  |
    Sends a percolate request to a specific index
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    Here is an example
    es.<index>.percolate('type1', {"doc":{"field1":"value1"}});

  InternalIndexClient.percolateBuilder:
  |
    Allows to build a percolate request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    Here is an example
    es.<index>.percolateBuilder().type('type1').source(doc).preferLocal(true).execute();

