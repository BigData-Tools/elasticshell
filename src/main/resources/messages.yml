welcome:
|
  @|bold Welcome to the elasticshell|@
bye:
  |

  bye
prompt: '> '

help:

  exit:
  |
    Quits the elasticshell

  help:
  |
    This is the elasticshell, a  shell for elasticsearch
    For information about elasticsearch, visit http://elasticsearch.org

    You can either write Java or JavaScript code in here.
    Every command is exposed as a JavaScript function, therefore in order to run a command you need to type its name followed by the round brackets (and eventual arguments between them)
    e.g. exit()

    In order to get help for a specific command, just type its name (without the brackets)
    e.g. exit

    The elasticshell comes with nice auto-suggestions, available pressing the tab key, which will show as a result a list of all the commands and objects available in the current context.

    The following are the available commands (with example arguments)
       exit() or quit()                   Quits the elasticshell
       help()                             Display this help message
       history()                          Displays the history
       httpDelete(url)                    Sends a DELETE http request
       httpGet(url)                       Sends a GET http request
       httpHead(url)                      Sends a HEAD http request
       httpPost(url, body)                Sends a POST http request
       httpPut(url, body)                 Sends a PUT http request
       importClass(java.util.Date)        Imports a Java class
       importPackage(java.util)           Imports a Java package
       load('./scripts/elastic.js')       Loads external Javascript source files
       nodeClient('elasticsearch')        Creates a new node client given
                                          the cluster name to connect to
       localNode('elasticsearch')         Creates a new local node given
                                          the name of the cluster to join
       print(es)                          Prints out the string representation
                                          of the provided arguments
       save(json, 'output.json')          Saves the string representation
                                          of any object to file
       toJson(facetBuilder)               Converts to json object the given
                                          argument if possible
       transportClient('localhost:9300')  Creates a new transport client given
                                          the address of the node to connect to
       version()                          Prints out the current version

  history:
  |
    Displays all the entries available in the history

  httpDelete:
  |
    Sends an http DELETE request to the specified urland returns the response.

    The following command will delete a document from elasticsearch using the DELETE api
    httpDelete('http://localhost:9200/twitter/tweet/1');

  httpGet:
  |
    Sends an http GET request to the specified urland returns the response.

    The following command will retrieve a document from elasticsearch using the get api
    var res = httpGet('http://localhost:9200/twitter/tweet/1');
    var doc = res.content();

  httpHead:
  |
    Sends an http HEAD request to the specified urland returns the response.

    The following command will check if a document exists within elasticsearch using the get api
    httpHead('http://localhost:9200/twitter/tweet/1');

  httpPost:
  |
    Sends an http POST request to the specified url and returns the response.

    The following command will update an existing document within elasticsearch using the update api
    httpPost('http://localhost:9200/twitter/tweet/1/_update', '{"doc":{"retweets":10}}');

    You can either provide the request body as a string like in the example above or specify more parameters as key value pairs using the HttpParameters helper class like this
    var params = HttpParameters.builder().add('foo', 'bla').add('bar', 'bla');
    httpPost('http://host:8080', params);

  httpPut:
  |
    Sends an http PUT request to the specified url and returns the response.

    The following command will index a document within elasticsearch using the index api
    httpPut('http://localhost:9200/twitter/tweet/1', '{"content":"#elasticsearch rocks"}');

    You can either provide the request body as a string like in the example above or specify more parameters as key value pairs using the HttpParameters helper class like this
    var params = HttpParameters.builder().add('foo', 'bla').add('bar', 'bla');
    httpPut('http://host:8080', params);

  load:
  |
    Loads the JavaScript source files named by string arguments.
    You can either provide an absolute path like this
    load('/opt/elasticshell/scripts/elastic.js')

    or a path relative to the elasticshell location
    load('./scripts/elastic.js')

    If multiple arguments are given, each file is read and executed in turn.

  localNode:
  |
    Creates (and starts) a new elasticsearch local node using the Java API.
    The node is local on the JVM level, meaning that two local servers started within the shell will discover themselves and form a cluster. The created local node holds data.

    The following command with no arguments will create a new local node that joins (or creates) a cluster called [elasticsearch]
    node = localNode();

    The following command with a string argument will create a local node that joins (or creates) a cluster with the given name [elasticshell]
    node = localNode('elasticshell');

    You can obtain a client from the node just using the client() method
    es = node.client();

  nodeClient:
  |
    Creates a new elasticsearch node client using the Java API.
    (http://www.elasticsearch.org/guide/reference/java-api/client.html)

    The following command with no arguments will create a new node client connected to the cluster with name elasticsearch
    es = nodeClient();

    The following command with a string argument will create a new node client connected to the cluster with name es-cluster
    es = nodeClient('es-cluster');

  toJson:
  |
    Converts to json the argument provided.
    The argument can be either a String or a ToXContent elasticsearch object.

    Executing the command with a String as input like this
    toJson('here goes your string');

    will have the same result as executing the following standard line
    JSON.parse('here goes your string');

    When providing a ToXContent object as input, the command will have the same result as converting it to a String and parsing it as json.
    The command is particularly useful when the ToXContent object doesn't override the toString method, which usually outputs the json as string.

    var termsFacetBuilder = FacetBuilders.termsFacet('facet name').field('field');
    var termsFacet = toJson(termsFacetBuilder);

  print:
  |
    Prints out the string representation of the provided arguments

  save:
  |
    Saves to file the string representation of the provided argument. Useful with big json objects for instance.
    The default location where the file is saved is ./output/output.txt but it's possible to provide the file path as the second argument.
    Consecutive save command executions to the same file will append content it.
    It's also possible to disable the default pretty-printed output and have the raw json saved to file.

  transportClient:
  |
    Creates a new elasticsearch transport client using the Java API.
    (http://www.elasticsearch.org/guide/reference/java-api/client.html)

    The following command with no arguments will create a new transport client connected to localhost, port 9300
    es = transportClient();

    The following command with a string argument will create a new transport client connected to es-host, port 9302

    es = transportClient('es-host:9302');

    You can connect to multiple nodes just providing a list of addresses
    es = transportClient('es-host1:9300','es-host2:9300','es-host3:9300');

  version:
  |
    Prints out the current elasticshell version.
    The elasticshell version is tightly coupled to the elasticsearch version, that's why they have the same version number.

  AbstractClient.availableIndices:
  |
    Returns a JSON object containing all the indices available within the current elasticsearch cluster, together with their aliases and types.

  InternalIndexClient.availableTypes:
  |
    Returns a JSON object containing all the types available under the selected index.

  AbstractClient.availableNodes:
  |
    Returns a JSON object containing all the nodes available within the current elasticsearch cluster.

  AbstractClient.bulkBuilder:
  |
    Returns an elasticsearch BulkProcessor.Builder which allows to easily build a new bulk request and configure the number or actions required for its execution, the size of the bulk, the optional time interval and the number of concurrent requests
    (https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java)

    The command below will create a new bulk which will be automatically executed as soon as 100 actions have been added to it
    var bulk = es.bulkBuilder().setBulkActions(100).build();

    Here is an example of how you can add an index request to the bulk
    bulk.add(Requests.indexRequest('twitter').type('tweet').id('1').source({content:"elasticsearch rocks"}));

  AbstractClient.bulk:
  |
    Returns an elasticsearch BulkProcessor with the default settings (1000 actions, size 5MB, no time interval, 1 concurrent request)
    (https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/action/bulk/BulkProcessor.java)

    The command below will create a new bulk with the default settings
    var bulk = es.bulk();

    Here is an example of how you can add an index request to the bulk
    bulk.add(Requests.indexRequest('twitter').type('tweet').id('1').source({content:"elasticsearch rocks"}));

  AbstractClient.countBuilder:
  |
    Allows to build a count request
    (http://www.elasticsearch.org/guide/reference/api/count/)

    Here is an example
    es.countBuilder().query({"term":{"content":"elasticsearch"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.countBuilder:
  |
    Allows to build a count request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/count/)

    Here is an example
    es.<index>.countBuilder().query({"term":{"content":"elasticsearch"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.countBuilder:
  |
    Allows to build a count request against a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/count/)

    Here is an example
    es.<index>.<type>.countBuilder().query({"term":{"content":"elasticsearch"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.count:
  |
    Returns the number of matches for a query using the count API
    (http://www.elasticsearch.org/guide/reference/api/count/)

    You can provide a json query as argument
    es.count({"term":{"content":"elasticsearch"}});

    or no argument to get the total number of documents available.

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.count:
  |
    Returns the number of matches for a query within a specific index
    (http://www.elasticsearch.org/guide/reference/api/count/)

    You can provide a json query as argument
    es.<index>.count({"term":{"content":"elasticsearch"}});

    or no argument to get the total number of documents available within the index.

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.count:
  |
    Returns the number of matches for a query within a specific type
    (http://www.elasticsearch.org/guide/reference/api/count/)

    You can provide a json query as argument
    es.<index>.<type>.count({"term":{"content":"elasticsearch"}});

    or no argument to get the total number of documents available within the type.

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.deleteBuilder:
  |
    Allows to build a delete request
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    Here is an example
    es.deleteBuilder().index('twitter').type('tweet').id('1').execute();

  InternalIndexClient.deleteBuilder:
  |
    Allows to build a delete request
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    Here is an example
    es.<index>.deleteBuilder().type('tweet').id('1').execute();

  InternalTypeClient.deleteBuilder:
  |
    Allows to build a delete request
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    Here is an example
    es.<index>.<type>.deleteBuilder().id('1').execute();

  AbstractClient.delete:
  |
    Deletes a document using the delete API
    (http://www.elasticsearch.org/guide/reference/api/delete/)
    
    The arguments are the index, the type and the id of the document to delete
    es.delete('twitter','tweet','1');

  InternalIndexClient.delete:
  |
    Deletes a document using the delete API
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    The arguments are the type and the id of the document to delete
    es.<index>.delete('tweet','1');

  InternalTypeClient.delete:
  |
    Deletes a document using the delete API
    (http://www.elasticsearch.org/guide/reference/api/delete/)

    The argument is the id of the document to delete
    es.<index>.<type>.delete('1');

  AbstractClient.deleteByQueryBuilder:
  |
    Allows to build a delete by query request
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    Here is an example that executes the query on all indices and deletes the matching documents
    es.deleteByQueryBuilder().query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example that executes the query against the provided indices and deletes the matching documents
    es.deleteByQueryBuilder().indices('index1','index2').query(query).execute();

    Here is an example that executes the query on all indices and deletes the matching documents, where the query is provided using the QueryBuilder helper class
    es.deleteByQueryBuilder().queryBuilder(QueryBuilders.termQuery('user','kimchy')).execute();

  InternalIndexClient.deleteByQueryBuilder:
  |
    Allows to build a delete by query request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    Here is an example that executes the query on the selected index and deletes the matching documents
    es.<index>.deleteByQueryBuilder().query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example that executes the query against all indices and deletes the matching documents, where the query is provided using the QueryBuilder helper class
    es.<index>.deleteByQueryBuilder().queryBuilder(QueryBuilders.termQuery('user','kimchy')).execute();

  InternalTypeClient.deleteByQueryBuilder:
  |
    Allows to build a delete by query request on a specific type
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    Here is an example that executes the query on the selected index and type and deletes the matching documents
    es.<index>.<type>.deleteByQueryBuilder().query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example that executes the query aginst the selected index and type and deletes the matching documents, where the query is provided using the QueryBuilder helper class
    es.<index>.<type>.deleteByQueryBuilder().queryBuilder(QueryBuilders.termQuery('user','kimchy')).execute();

  AbstractClient.deleteByQuery:
  |
    Deletes all the documents matching a query executed on all indices
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    The required argument is the query, provided as a json object
    es.deleteByQuery({"term":{"user":"kimchy"}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.deleteByQuery:
  |
    Deletes all the documents matching a query executed on a specific index
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    The required argument is the query, provided as a json object
    es.<index>.deleteByQuery({"term":{"user":"kimchy"}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.deleteByQuery:
  |
    Deletes all the documents matching a query executed on a specific type
    (http://www.elasticsearch.org/guide/reference/api/delete-by-query/)

    The required argument is the query, provided as a json object
    es.<index>.<type>.deleteByQuery({"term":{"user":"kimchy"}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.explainBuilder:
  |
    Allows to build an explain request
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    Here is an example providing the query as a json object
    es.explainBuilder().index('twitter').type('tweet').id('1').query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example providing the query using the QueryBuilders helper class
    es.explainBuilder().index('twitter').type('tweet').id('1').queryBuilder(QueryBuilder.termQuery('user','kimchy')).execute();

  InternalIndexClient.explainBuilder:
  |
    Allows to build an explain request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    Here is an example providing the query as a json object
    es.<index>.explainBuilder().type('tweet').id('1').query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example providing the query using the QueryBuilders helper class
    es.<index>.explainBuilder().type('tweet').id('1').queryBuilder(QueryBuilder.termQuery('user','kimchy')).execute();

  InternalTypeClient.explainBuilder:
  |
    Allows to build an explain request on a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    Here is an example providing the query as a json object
    es.<index>.<type>.explainBuilder().id('1').query({"term":{"user":"kimchy"}}).execute();

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    Here is an example providing the query using the QueryBuilders helper class
    es.<index>.<type>.explainBuilder().id('1').queryBuilder(QueryBuilder.termQuery('user','kimchy')).execute();

  AbstractClient.explain:
  |
    Computes a score explanation for a query and a specific document
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    The required arguments are index, type, document id and the query (provided as a json object)
    es.explain('twitter','tweet','1',{"term":{"user":"kimchy"}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.explain:
  |
    Computes a score explanation for a query and a specific document
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    The required arguments are type, document id and the query (provided as a json object)
    es.<index>.explain('tweet','1',{"term":{"user":"kimchy"}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.explain:
  |
    Computes a score explanation for a query and a specific document
    (http://www.elasticsearch.org/guide/reference/api/explain/)

    The required arguments are document id and the query (provided as a json object)
    es.<index>.<type>.explain('1',{"term":{"user":"kimchy"}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.getBuilder:
  |
    Allows to build a get request
    (http://www.elasticsearch.org/guide/reference/api/get/)

    Here is an example
    es.getBuilder().index('twitter').type('tweet').id('1').execute();

  InternalIndexClient.getBuilder:
  |
    Allows to build a get request
    (http://www.elasticsearch.org/guide/reference/api/get/)

    Here is an example
    es.<index>.getBuilder().type('tweet').id('1').execute();

  InternalTypeClient.getBuilder:
  |
    Allows to build a get request
    (http://www.elasticsearch.org/guide/reference/api/get/)

    Here is an example
    es.<index>.<type>.getBuilder().id('1').execute();

  AbstractClient.get:
  |
    Retrieves a document by id using the get api
    (http://www.elasticsearch.org/guide/reference/api/get/)

    The required arguments are index, type and id of the document
    es.get('twitter','tweet','1');

  InternalIndexClient.get:
  |
    Retrieves a document by id using the get api
    (http://www.elasticsearch.org/guide/reference/api/get/)

    The required arguments are type and id of the document
    es.<index>.get('tweet','1');

  InternalTypeClient.get:
  |
    Retrieves a document by id using the get api
    (http://www.elasticsearch.org/guide/reference/api/get/)

    The required argument is the id of the document
    es.<index>.<type>.get('1');

  AbstractClient.indexBuilder:
  |
    Allows to build an index request
    (http://www.elasticsearch.org/guide/reference/api/index/)

    Here is an example
    es.indexBuilder().index('twitter').type('tweet').id('1').source({"user":"kimchy", "content":"elasticsearch rocks"}).execute();

    The document doesn't need to be provided in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.indexBuilder:
  |
    Allows to build an index request
    (http://www.elasticsearch.org/guide/reference/api/index/)

    Here is an example
    es.<index>.indexBuilder().type('tweet').id('1').source({"user":"kimchy", "content":"elasticsearch rocks"}).execute();

    The document doesn't need to be provided in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.indexBuilder:
  |
    Allows to build an index request
    (http://www.elasticsearch.org/guide/reference/api/index/)

    Here is an example
    es.<index>.<type>.indexBuilder().id('1').source({"user":"kimchy", "content":"elasticsearch rocks"}).execute();

    The document doesn't need to be provided in a single line. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.index:
  |
    Indexes a document using the index api
    (http://www.elasticsearch.org/guide/reference/api/index/)

    The required arguments are index, type, document id and the document (provided as a json object)
    es.index('twitter','tweet','1',{"user":"kimchy", "content":"elasticsearch rocks"});

    The document doesn't need to be provided in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.index:
  |
    Indexes a document using the index api
    (http://www.elasticsearch.org/guide/reference/api/index/)

    The required arguments are type, document id and the document (provided as a json object)
    es.<index>.index('tweet','1',{"user":"kimchy", "content":"elasticsearch rocks"});

    The document doesn't need to be provided in a single line. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.index:
  |
    Indexes a document using the index api
    (http://www.elasticsearch.org/guide/reference/api/index/)

    The required arguments are document id and the document (provided as a json object)
    es.<index>.<type>.index('1',{"user":"kimchy", "content":"elasticsearch rocks"});

    The document doesn't need to be provided in a single line. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.multiGetBuilder:
  |
    Allows to build a multi get request
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    Here is an example that retrieves two documents with a single request
    es.multiGetBuilder().add('twitter','tweet','1','2').execute();

    Using the builder you can retrieve multiple documents from different indexes or types too
    es.multiGetBuilder().add('twitter','tweet','1').add('blog','trifork','1','2').execute();

  AbstractClient.multiGet:
  |
    Retrieves multiple documents by id using the multi get api
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    The required arguments are index, type and the ids of the document to retrieve
    es.multiGet('twitter','tweet','1','2','3');

  InternalIndexClient.multiGet:
  |
    Retrieves multiple documents by id using the multi get api
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    The required arguments are type and the ids of the document to retrieve
    es.<index>.multiGet('tweet','1','2','3');

  InternalTypeClient.multiGet:
  |
    Retrieves multiple documents by id using the multi get api
    (http://www.elasticsearch.org/guide/reference/api/multi-get/)

    The required arguments are the ids of the document to retrieve
    es.<index>.<type>.multiGet('1','2','3');

  AbstractClient.multiSearchBuilder:
  |
    Allows to build a multi search request
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    Here is an example that sends two queries in a single request
    es.multiSearchBuilder().add({"query":{"term":{"user":"kimchy"}}}).add({"query":{"term":{"user":"s1monw"}}}).execute();

    You can either use a json query or the Java API SearchRequest (or SearchSourceBuilder) object
    es.multiSearchBuilder().add(SearchSourceBuilder.searchSource().query(QueryBuilders.termQuery('user','kimchy'))).add({"query":{"term":{"user":"s1monw"}}}).execute()

  AbstractClient.multiSearch:
  |
    Executes multiple searches in a single request
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    The arguments that need to provided are the search requests to execute

    Here is an example that sends two queries in a single request
    es.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.multiSearch:
  |
    Executes multiple searches in a single request
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    The arguments that need to provided are the search requests to execute

    Here is an example that sends two queries in a single request
    es.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.multiSearch:
  |
    Executes multiple searches in a single request, within a specific index
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    The arguments that need to provided are the search requests to execute

    Here is an example that sends two queries in a single request
    es.<index>.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.multiSearch:
  |
    Executes multiple searches in a single request, within a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/multi-search/)

    The arguments that need to provided are the search requests to execute

    Here is an example that sends two queries in a single request
    es.<index>.<type>.multiSearch({"query":{"term":{"user":"kimchy"}}}, {"query":{"term":{"user":"s1monw"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  AbstractClient.moreLikeThis:
  |
    Executes a more like this request
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    The required arguments are the index, the type and the id of the document to be used in order to find similar ones

    Here is an example
    es.moreLikeThis('twitter','tweet','1');

  AbstractClient.moreLikeThisBuilder:
  |
    Allows to build a more like this request
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.moreLikeThisBuilder('twitter').type('tweet').id('1').minTermFreq(1).minDocFreq(1).execute();

  InternalIndexClient.moreLikeThis:
  |
    Executes a more like this request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    The required arguments are the type and the id of the document to be used in order to find similar ones

    Here is an example
    es.<index>.moreLikeThis('tweet','1');

  InternalIndexClient.moreLikeThisBuilder:
  |
    Allows to build a more like this request on a specific index
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.<index>.moreLikeThisBuilder().type('tweet').id('1').minTermFreq(1).minDocFreq(1).execute();

  InternalTypeClient.moreLikeThis:
  |
    Executes a more like this request on a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    The required argument is the id of the document to be used in order to find similar ones

    Here is an example
    es.<index>.<type>.moreLikeThis('1');

  InternalTypeClient.moreLikeThisBuilder:
  |
    Allows to build a more like this request on a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/more-like-this/)

    Here is an example
    es.<index>.<type>.moreLikeThisBuilder().id('1').minTermFreq(1).minDocFreq(1).execute();

  AbstractClient.percolate:
  |
    Sends a percolate request
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    The required arguments are the index, the type and the document to percolate

    Here is an example
    es.percolate('test','type1', {"doc":{"field1":"value1"}});

  AbstractClient.percolateBuilder:
  |
    Allows to build a percolate request
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    Here is an example
    es.percolateBuilder().index('test').type('type1').source(doc).preferLocal(true).execute();

  InternalIndexClient.percolate:
  |
    Sends a percolate request to a specific index
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    The required arguments are the type and the document to percolate

    Here is an example
    es.<index>.percolate('type1', {"doc":{"field1":"value1"}});

  InternalIndexClient.percolateBuilder:
  |
    Allows to build a percolate request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/percolate/)

    Here is an example
    es.<index>.percolateBuilder().type('type1').source(doc).preferLocal(true).execute();

  AbstractClient.search:
  |
    Executes a search request
    (http://www.elasticsearch.org/guide/reference/api/search/)

    The following example will send a match_all query
    es.search();

    The following example sends the provided term query
    es.search({"query":{"term":{"user":"kimchy"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    It's also possible to provide a string which will be included in a query_string
    es.search('user:kimchy');

  AbstractClient.searchBuilder:
  |
    Allows to build a search request
    (http://www.elasticsearch.org/guide/reference/api/search/)

    The following example builds and sends a term query specifying a routing value
    es.searchBuilder().routing('kimchy').query({"term":{"user":"kimchy"}}).execute();

    It's also possible to build the query using the QueryBuilder objects that come with the Java API
    es.searchBuilder().queryBuilder(QueryBuilders.multiMatchQuery('kimchy','title^2','user')).execute()

  InternalIndexClient.search:
  |
    Executes a search request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/search/)

    The following example will send a match_all query
    es.<index>.search();

    The following example sends the provided term query
    es.<index>.search({"query":{"term":{"user":"kimchy"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    It's also possible to provide a string which will be included in a query_string
    es.<index>.search('user:kimchy');

  InternalIndexClient.searchBuilder:
  |
    Allows to build a search request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/search/)

    The following example builds and sends a term query specifying a routing value
    es.<index>.searchBuilder().routing('kimchy').query({"term":{"user":"kimchy"}}).execute();

    It's also possible to build the query using the QueryBuilder objects that come with the Java API
    es.<index>.searchBuilder().queryBuilder(QueryBuilders.multiMatchQuery('kimchy','title^2','user')).execute()

  InternalTypeClient.search:
  |
    Executes a search request against a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/search/)

    The following example will send a match_all query
    es.<index>.<type>.search();

    The following example sends the provided term query
    es.<index>.<type>.search({"query":{"term":{"user":"kimchy"}}});

    The query doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

    It's also possible to provide a string which will be included in a query_string
    es.<index>.<type>.search('user:kimchy');

  InternalTypeClient.searchBuilder:
  |
    Allows to build a search request against a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/search/)

    The following example builds and sends a term query specifying a routing value
    es.<index>.<type>.searchBuilder().routing('kimchy').query({"term":{"user":"kimchy"}}).execute();

    It's also possible to build the query using the QueryBuilder objects that come with the Java API
    es.<index>.<type>.searchBuilder().queryBuilder(QueryBuilders.multiMatchQuery('kimchy','title^2','user')).execute()

  AbstractClient.update:
  |
    Executes an update request
    (http://www.elasticsearch.org/guide/reference/api/update/)
    The first three arguments are the index, the type and the id of the document to update

    You can either provide a partial document as fourth argument, which will be merged with the existing one
    es.update('twitter','tweet','1',{"content":"new content"});

    or a script that will be executed on the existing document
    es.update('twitter','tweet','1',"ctx._source.retweets += 1");

  AbstractClient.updateBuilder:
  |
    Allows to build an update request
    (http://www.elasticsearch.org/guide/reference/api/update/)

    The following example provides a partial document and an additional upsert document to be indexed when the document to be updated doesn't exist
    es.updateBuilder().index('twitter').type('tweet').id('1').doc({"content":"updated content"}).upsert({"content":"new content"}).execute();

    The following example provides a script to be executed and a parameter, so that the script will be cached and faster
    es.updateBuilder().index('twitter').type('tweet').id('1').addScriptParam('retweets',10).script("ctx._source.retweets += retweets").execute();

  InternalIndexClient.update:
  |
    Executes an update request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/update/)
    The first two arguments are the type and the id of the document to update

    You can either provide a partial document as third argument, which will be merged with the existing one
    es.<index>.update('tweet','1',{"content":"new content"});

    or a script that will be executed on the existing document
    es.<index>.update('tweet','1',"ctx._source.retweets += 1");

  InternalIndexClient.updateBuilder:
  |
    Allows to build an update request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/update/)

    The following example provides a partial document and an additional upsert document to be indexed when the document to be updated doesn't exist
    es.<index>.updateBuilder().type('tweet').id('1').doc({"content":"updated content"}).upsert({"content":"new content"}).execute();

    The following example provides a script to be executed and a parameter, so that the script will be cached and faster
    es.<index>.updateBuilder().type('tweet').id('1').addScriptParam('retweets',10).script("ctx._source.retweets += retweets").execute();

  InternalTypeClient.update:
  |
    Executes an update request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/update/)
    The first argument is the id of the document to update

    You can either provide a partial document as second argument, which will be merged with the existing one
    es.<index>.<type>.update('1',{"content":"new content"});

    or a script that will be executed on the existing document
    es.<index>.<type>.update('1',"ctx._source.retweets += 1");

  InternalTypeClient.updateBuilder:
  |
    Allows to build an update request against a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/update/)

    The following example provides a partial document and an additional upsert document to be indexed when the document to be updated doesn't exist
    es.<index>.<type>.updateBuilder().id('1').doc({"content":"updated content"}).upsert({"content":"new content"}).execute();

    The following example provides a script to be executed and a parameter, so that the script will be cached and faster
    es.<index>.<type>.updateBuilder().id('1').addScriptParam('retweets',10).script("ctx._source.retweets += retweets").execute();

  AbstractClient.validate:
  |
    Executes a validate query request
    (http://www.elasticsearch.org/guide/reference/api/validate/)

    The argument can either be a complete query in json format
    es.validate({"term":{"user":"kimchy"}});

    or a string that will be included in a query string
    es.validate('user:kimchy');

  AbstractClient.validateBuilder:
  |
    Allows to build a validate query request
    (http://www.elasticsearch.org/guide/reference/api/validate/)

    Here is an example using the QueryBuilders that comes with the Java API
    es.validateBuilder().queryBuilder(QueryBuilders.queryString('user:kimchy')).execute();

  InternalIndexClient.validate:
  |
    Executes a validate query request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/validate/)

    The argument can either be a complete query in json format
    es.<index>.validate({"term":{"user":"kimchy"}});

    or a string that will be included in a query string
    es.<index>.validate('user:kimchy');

  InternalIndexClient.validateBuilder:
  |
    Allows to build a validate query request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/validate/)

    Here is an example using the QueryBuilders that comes with the Java API
    es.<index>.validateBuilder().queryBuilder(QueryBuilders.queryString('user:kimchy')).execute();

  InternalTypeClient.validate:
  |
    Executes a validate query request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/validate/)

    The argument can either be a complete query in json format
    es.<index>.<type>.validate({"term":{"user":"kimchy"}});

    or a string that will be included in a query string
    es.<index>.<type>.validate('user:kimchy');

  InternalTypeClient.validateBuilder:
  |
    Allows to build a validate query request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/validate/)

    Here is an example using the QueryBuilders that comes with the Java API
    es.<index>.<type>.validateBuilder().queryBuilder(QueryBuilders.queryString('user:kimchy')).execute();

  AbstractClient.dumpSaveBuilder:
  |
    Saves a dump of an index. Uses the scroll api to fetch all the documents that match the query provided (match_all by default) and saves them to disk.

    The optional query can be either provided in json format
    es.dumpSaveBuilder().indices('twitter').path('/home/luca/Desktop/twitter.json').query({"term":{"user":"kimchy"}}).execute();

    or built through the QueryBuilders object that comes with the Java API
    es.dumpSaveBuilder().indices('twitter').path('/home/luca/Desktop/twitter.json').query(QueryBuilders.termQuery('user','kimchy')).execute();

  AbstractClient.dumpRestoreBuilder:
  |
    Restores a dump of an index previously saved to file.

    Here is an example
    es.dumpRestoreBuilder().index('twitter').type('tweet').path('//home/luca/Desktop/twitter.json').execute();

  InternalIndexClient.dumpSaveBuilder:
  |
    Saves a dump of an index. Uses the scroll api to fetch all the documents that match the query provided (match_all by default) and saves them to disk.

    The optional query can be either provided in json format
    es.<index>.dumpSaveBuilder().path('/home/luca/Desktop/twitter.json').query({"term":{"user":"kimchy"}}).execute();

    or built through the QueryBuilders object that comes with the Java API
    es.<index>.dumpSaveBuilder().path('/home/luca/Desktop/twitter.json').query(QueryBuilders.termQuery('user','kimchy')).execute();

  InternalIndexClient.dumpRestoreBuilder:
  |
    Restores a dump of an index previously saved to file.

    Here is an example
    es.<index>.dumpRestoreBuilder().type('tweet').path('/home/luca/Desktop/twitter.json').execute();

  InternalTypeClient.dumpSaveBuilder:
  |
    Saves a dump of an index. Uses the scroll api to fetch all the documents that match the query provided (match_all by default) and saves them to disk.

    The optional query can be either provided in json format
    es.<index>.<type>.dumpSaveBuilder().path('/home/luca/Desktop/twitter.json').query({"term":{"user":"kimchy"}}).execute();

    or built through the QueryBuilders object that comes with the Java API
    es.<index>.dumpSaveBuilder().path('/home/luca/Desktop/twitter.json').query(QueryBuilders.termQuery('user','kimchy')).execute();

  InternalTypeClient.dumpRestoreBuilder:
  |
    Restores a dump of an index previously saved to file.

    Here is an example
    es.<index>.<type>.dumpRestoreBuilder().path('//home/luca/Desktop/twitter.json').execute();

  AbstractClient.indicesApi:
  |
    Gives access to the indices API

  AbstractClient.clusterApi:
  |
    Gives access to the cluster API

  IndicesApiClient.aliasesGet:
  |
    Retrieves the available index aliases
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/)

    Here is an example
    es.indicesApi().aliasesGet();

  IndicesApiClient.aliasesGetBuilder:
  |
    Retrieves the available index aliases through a builder
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/)

    Here is an example
    es.indicesApi().aliasesGetBuilder().indices('twitter').execute();

  InternalIndexClient.aliasesGet:
  |
    Retrieves the available index aliases for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/)

    Here is an example
    es.<index>.aliasesGet();

  IndicesApiClient.aliasesUpdateBuilder:
  |
    Allows to build a request that updates index aliases
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/)

    The alias actions need to be provided through the AliasAction object that comes with the Java API

    The following example creates an alias pointing to the twitter index and provides a filter too
    es.indicesApi().aliasesUpdateBuilder().addAliasAction(AliasAction.newAddAliasAction('twitter','alias').filter(FilterBuilders.typeFilter('tweet'))).execute();

    The following example deletes the previously created alias
    es.indicesApi().aliasesUpdateBuilder().addAliasAction(AliasAction.newRemoveAliasAction('test','alias')).execute();

    It's also possible to execute multiple alias actions at the same time

  IndicesApiClient.analyze:
  |
    Returns the result of the analysis process using the analyze api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/)

    The first argument is the text to be analyzed

    The other arguments can either be the analyzer to be used for the text analysis
    es.indicesApi().analyze('this is a test', 'keyword');

    or the index and the field name whose analyzer will be used for the text analysis
    es.indicesApi().analyze('this is a test', 'twitter','title');

  IndicesApiClient.analyzeBuilder:
  |
    Allows to build an analyze request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/)

    Here is an example that specifies both a tokenizer and a token filter
    es.indicesApi().analyzeBuilder().tokenizer('keyword').tokenFilters('trim').text('this is a test').execute();

  InternalIndexClient.analyze:
  |
    Returns the result of the analysis process using the analyze api against a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-analyze/)

    The arguments are the text to be analyzed and the field name whose analyzer will be used for the text analysis
    es.<index>.analyze('this is a test', 'title');

  IndicesApiClient.clearCache:
  |
    Clears all indices caches using the clear cache api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/)

    Here is an example
    es.indicesApi().clearCache();

  IndicesApiClient.clearCacheBuilder:
  |
    Allows to build a clear cache request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/)

    The following example clears only the field data cache for all the available indices
    es.indicesApi().clearCacheBuilder().fieldDataCache(true).execute()

  InternalIndexClient.clearCache:
  |
    Clears all indices caches using the clear cache api against a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/)

    Here is an example
    es.<index>.clearCache();

  InternalIndexClient.clearCacheBuilder:
  |
    Allows to build a clear cache request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-clearcache/)

    The following example clears only the field data cache for the selected index
    es.<index>.clearCacheBuilder().fieldDataCache(true).execute();

  IndicesApiClient.closeIndex:
  |
    Closes an index using the close index api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    The required argument is the index to close
    es.indicesApi().closeIndex('twitter');

  IndicesApiClient.closeIndexBuilder:
    |
      Allows to build a close index request
      (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

      Here is an example
      es.indicesApi().closeIndexBuilder().index('twitter').execute();

  InternalIndexClient.closeIndex:
  |
    Closes an index using the close index api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    Here is an example
    es.<index>.closeIndex();

  InternalIndexClient.closeIndexBuilder:
  |
    Allows to build a close index request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    Here is an example
    es.<index>.closeIndexBuilder().execute();

  IndicesApiClient.openIndex:
  |
    Opens an index using the open index api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    The required argument is the index to open
    es.indicesApi().openIndex('twitter');

  IndicesApiClient.openIndexBuilder:
  |
    Allows to build a open index request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    Here is an example
    es.indicesApi().openIndexBuilder().index('twitter').execute();

  InternalIndexClient.openIndex:
  |
    Closes an index using the open index api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    Here is an example
    es.<index>.openIndex();

  InternalIndexClient.openIndexBuilder:
  |
    Allows to build a open index request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-open-close/)

    Here is an example
    es.<index>.openIndexBuilder().execute();

  IndicesApiClient.createIndex:
  |
    Creates an index using the create index api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/)

    The required argument is the name of the index to create
    es.indicesApi.createIndex('twitter');

    In order to provide the mapping or the settings you need to use the createIndexBuilder method

  IndicesApiClient.createIndexBuilder:
  |
    Creates an index using the create index api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-create-index/)

    The following example creates an index providing its settings as well
    es.indicesApi().createIndexBuilder().index('twitter').settings({'number_of_shards':1}).execute();

  IndicesApiClient.deleteIndex:
  |
    Deletes all the indices available on the cluster, use with caution
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/)

    Here is an example
    es.indicesApi().deleteIndex();

  IndicesApiClient.deleteIndexBuilder:
  |
    Allows to build a delete index request, use with caution since it delets all the indices by default
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/)

    Here is an example that deletes two indexes in a single request
    es.indicesApi().deleteIndexBuilder().indices('twitter','path');

  InternalIndexClient.deleteIndex:
  |
    Deletes an index, use with caution
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-index/)

    Here is an example
    es.<index>.deleteIndex();

  IndicesApiClient.flush:
  |
    Flushes all indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/)

    Here is an example
    es.indicesApi().flush();

  IndicesApiClient.flushBuilder:
  |
    Allows to build a flush request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/)

    The following example flushes two specific indices and forces their refresh too
    es.indicesApi().flushBuilder().indices('twitter','path').refresh(true).execute();

  InternalIndexClient.flush:
  |
    Flushes an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/)

    Here is an example
    es.<index>.flush();

  InternalIndexClient.flushBuilder:
  |
    Allows to build a flush request against a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-flush/)

    The following example forces the refresh of the index that's being flushed
    es.<index>.flushBuilder().refresh(true).execute();

  IndicesApiClient.indicesExists:
  |
    Checks whether an index exists or not
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-indices-exists/)

    Here is an example
    es.indicesApi().indicesExists('twitter');

  IndicesApiClient.mappingGet:
  |
    Retrieves the mapping using the get mapping api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/)

    The following example retrieves the mapping for all the indexes
    es.indicesApi().mappingGet();

    The following example retrieves the mapping for the provided indexes
    es.indicesApi().mappingGet('twitter','path');

  IndicesApiClient.mappingGetBuilder:
  |
    Allows to build a get mapping request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/)

    The following example retrieves the mapping for all the indexes and types provided
    es.indicesApi().mappingGetBuilder().indices('twitter','path').types('type1','type2').execute();

  InternalIndexClient.mappingGet:
  |
    Retrieves the mapping for a specific index using the get mapping api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/)

    The following example retrieves the mapping for the selected index
    es.<index>.mappingGet();

    The following example retrieves the mapping for the selected index and the provided types
    es.<index>.mappingGet('type1','type2');

  InternalTypeClient.mappingGet:
  |
    Retrieves the mapping for a specific index and type using the get mapping api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-get-mapping/)

    The following example retrieves the mapping for the selected index and type
    es.<index>.<type>.mappingGet();

  IndicesApiClient.mappingDelete:
  |
    Deletes a mapping along with its data. Use with caution!
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/)

    The required arguments are the index and the type name
    es.indicesApi().mappingDelete('twitter','tweet');

  IndicesApiClient.mappingDeleteBuilder:
  |
    Allows to build a delete mapping request. Use with caution since it deletes data too.
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/)

    Here is an example
    es.indicesApi().mappingDeleteBuilder().indices('twitter','path').type('type1').execute();

  InternalIndexClient.mappingDelete:
  |
    Deletes a mapping along with its data. Use with caution!
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/)

    The required argument is the type name
    es.<index>.mappingDelete('tweet');

  InternalTypeClient.mappingDelete:
  |
    Deletes a mapping along with its data. Use with caution!
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-delete-mapping/)

    Here is an example
    es.<index>.<type>.mappingDelete();

  IndicesApiClient.mappingPut:
  |
    Submits a mapping using the put mapping api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/)

    The required arguments are the index, the type name and its mapping
    es.indicesApi().mappingPut('twitter','tweet',{"tweet":{"_all":{"enabled":false}}})

    The mapping doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  IndicesApiClient.mappingPutBuilder:
  |
    Allows to build a put mapping request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/)

    Here is an example
    es.indicesApi().mappingPutBuilder().indices('twitter').type('tweet').source({"tweet":{"_source":{"enabled":false}}}).ignoreConflicts(true).execute();

    The mapping doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.mappingPut:
  |
    Submits a mapping using the put mapping api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/)

    The required arguments are the type name and its mapping
    es.<index>.mappingPut('tweet',{"tweet":{"_all":{"enabled":false}}})

    The mapping doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalIndexClient.mappingPutBuilder:
  |
    Allows to build a put mapping request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/)

    Here is an example
    es.<index>.mappingPutBuilder().type('tweet').source({"tweet":{"_source":{"enabled":false}}}).ignoreConflicts(true).execute();

    The mapping doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.mappingPut:
  |
    Submits a mapping using the put mapping api
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/)

    The required argument is the mapping in json format
    es.<index>.<type>.mappingPut({"tweet":{"_all":{"enabled":false}}})

    The mapping doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  InternalTypeClient.mappingPutBuilder:
  |
    Allows to build a put mapping request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-put-mapping/)

    Here is an example
    es.<index>.<type>.mappingPutBuilder().source({"tweet":{"_source":{"enabled":false}}}).ignoreConflicts(true).execute();

    The mapping doesn't need to be provided in a single line though. It can be a variable, even copy pasted from outside the shell.

  IndicesApiClient.optimize:
  |
    Allows to optimize one or more indices. Use with caution since it can take a while with big indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/)

    Here is an example
    es.indicesApi().optimize('twitter');

  IndicesApiClient.optimizeBuilder:
  |
    Allows to build an optimize request. Use with caution since it can take a while with a big index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/)

    Here is an example specifying the maximum number of segments
    es.indicesApi().optimizeBuilder().indices('twitter').maxNumSegments(5).execute();

  InternalIndexClient.optimize:
  |
    Allows to optimize an index. Use with caution since it can take a while with a big index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/)

    Here is an example
    es.<index>.indicesApi().optimize();

  InternalIndexClient.optimizeBuilder:
  |
    Allows to build an optimize request. Use with caution since it can take a while with a big index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-optimize/)

    Here is an example specifying the maximum number of segments
    es.<index>.optimizeBuilder().maxNumSegments(5).execute();

  IndicesApiClient.refresh:
  |
    Allows to refresh one or more indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/)

    Here is an example
    es.indicesApi().refresh('twitter');

  IndicesApiClient.refreshBuilder:
  |
    Allows to build a refresh request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/)

    Here is an example
    es.indicesApi().refreshBuilder().indices('twitter').execute();

  InternalIndexClient.refresh:
  |
    Allows to refresh an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/)

    Here is an example
    es.<index>.refresh();

  InternalIndexClient.refreshBuilder:
  |
    Allows to build a refresh request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-refresh/)

    Here is an example
    es.<index>.refreshBuilder().indices('twitter').execute();

  IndicesApiClient.segments:
  |
    Allows to view all the segments that one or more indices are composed of
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-segments/)

    Here is an example
    es.indicesApi().segments('twitter');

  InternalIndexClient.segments:
  |
    Allows to view all the segments that an index is composed of
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-segments/)

    Here is an example
    es.<index>.segments();

  IndicesApiClient.settingsGet:
  |
    Allows to retrieve the settings for one or more indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/)

    Here is an example
    es.indicesApi().settingsGet('twitter');

  InternalIndexClient.settingsGet:
  |
    Allows to retrieve the settings for an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-get-settings/)

    Here is an example
    es.<index>.settingsGet();

  IndicesApiClient.settingsUpdate:
  |
    Updates the settings for an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/)

    The first parameter is the name of the index and the second one is the json object that contains the new settings.
    The following example sets to 0 the number of replicas for the twitter index
    es.indicesApi().settingsUpdate('twitter',{"number_of_replicas":0});

  IndicesApiClient.settingsUpdateBuilder:
  |
    Allows to build an update settings request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/)

    The following example sets to 0 the number of replicas for the twitter index
    es.indicesApi().settingsUpdateBuilder().indices('twitter').settings({"number_of_replicas":0}).execute();

    You can provide a list of indices in order to apply to same settings to multiple indices
    es.indicesApi().settingsUpdateBuilder().indices('twitter', 'user').settings({"number_of_replicas":0}).execute();

  InternalIndexClient.settingsUpdate:
  |
    Updates the settings for an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-update-settings/)

    The required parameter is the json object that contains the new settings.
    The following example sets to 0 the number of replicas for a specific index
    es.<index>.settingsUpdate({"number_of_replicas":0});

  IndicesApiClient.stats:
  |
    Allows to retrieve statistics about one or more indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-stats/)

    Here is an example
    es.indicesApi().stats('twitter');

  IndicesApiClient.statsBuilder:
  |
    Allows to build an indices stats request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-stats/)

    The following example only asks for the information regarding the fielddata cache, for all indices available
    es.indicesApi().statsBuilder().fieldData(true).search(false).indexing(false).store(false).get(false).execute();

    You could provide a list of indices too
    es.indicesApi().statsBuilder().indexing(false).store(false).indices('twitter','user').execute();

  InternalIndexClient.stats:
  |
    Allows to retrieve statistics about an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-stats/)

    Here is an example
    es.<index>.stats();

  InternalIndexClient.statsBuilder:
  |
    Allows to build an indices stats request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-stats/)

    The following example only asks for the information regarding the fielddata cache
    es.<index>.statsBuilder().fieldData(true).search(false).indexing(false).store(false).get(false).execute();

  IndicesApiClient.status:
  |
    Allows to get a comprehensive status information of one or more indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-status/)

    Here is an example
    es.indicesApi().status('twitter');

  IndicesApiClient.statusBuilder:
  |
    Allows to build an indices status request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-status/)

    Here is an example that asks for the recovery information for all available indices
    es.indicesApi().statusBuilder().recovery(true).execute();

  InternalIndexClient.status:
  |
    Allows to get a comprehensive status information of an index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-status/)

    Here is an example
    es.<index>.status();

  InternalIndexClient.statusBuilder:
  |
    Allows to build an indices status request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-status/)

    Here is an example that asks for the recovery information
    es.<index>.statusBuilder().recovery(true).execute();

  IndicesApiClient.templateGet:
  |
    Allows to retrieve one or more index templates
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/)

    The required parameter is the name of the template to retrieve
    es.indicesApi().templateGet('0_replicas');

    It's possible to provide a list of names too
    es.indicesApi().templateGet('0_replicas', '1_replicas');

  IndicesApiClient.templateDelete:
  |
    Allows to delete an existing index template
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/)

    Here is an example
    es.indicesApi().templateDelete('0_replicas');

  IndicesApiClient.templatePut:
  |
    Allows to register a new index template
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/)

    The first parameter is the name of the index template.
    The second parameter is the template itself as json object, which contains the template pattern, the settings and the mappings.
    In order to provide those parameters separately you can switch to the templatePutBuilder method.

    Here is an example that sets the number of replicas to 0 for all indices by default
    es.indicesApi().templatePut('0_replicas',{"template":"*","settings":{"number_of_replicas":0}});

  IndicesApiClient.templatePutBuilder:
  |
    Allows to build a put index template request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-templates/)

    Here is an example that sets the number of replicas to 0 for all indices by default
    es.indicesApi().templatePutBuilder().name('0_replicas').template('*').settings({"number_of_replicas":0}).execute();

  IndicesApiClient.typesExists:
  |
    Checks whether a type exists or not
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-types-exists/)

    The first parameter is the index name, the second is the type name
    es.indicesApi().typesExists('twitter', 'tweet');

  InternalIndexClient.typesExists:
  |
    Checks whether a type exists or not
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-types-exists/)

    Here is an example
    es.<index>.typesExists('tweet');

  IndicesApiClient.warmerGet:
  |
    Allows to retrieve warmers
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    It's either possible to retrieve warmers for all indices
    es.indicesApi().warmerGet();

    for a specific index
    es.indicesApi().warmerGet('twitter');

    or for a set of indices
    es.indicesApi().warmerGet('twitter','user');

  IndicesApiClient.warmerGetBuilder:
  |
    Allows to build a get warmer request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    It's possible to retrieve a warmer by name
    es.indicesApi().warmerGetBuilder().name('es-warmer').execute();

    and retrieve all the warmers for a list of indices
    es.indicesApi().warmerGetBuilder().indices('twitter', 'user').execute();

  InternalIndexClient.warmerGet:
  |
    Allows to retrieve warmers for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    Here is an example
    es.<index>.warmerGet();

  InternalIndexClient.warmerGetBuilder:
  |
    Allows to build a get warmer request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    It's possible to retrieve a warmer by name
    es.<index>.warmerGetBuilder().name('es-warmer').execute();

    or just all the warmers for the selected index
    es.<index>.warmerGetBuilder().execute();

  IndicesApiClient.warmerPut:
  |
    Allows to register a new warmer for all indices
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    The search request needs to be provided as a json object
    es.indicesApi.warmerPut('es-warmer',{"filter":{"term":{"content":"elasticsearch"}}});

    In order to use the SearchRequest object coming with the Java API you can switch to the warmerPutBuilder method.

  IndicesApiClient.warmerPutBuilder:
  |
    Allows to build a put warmer request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    You can either provide the search request as a SearchRequest object (Java API)
    var request = Requests.searchRequest().source(SearchSourceBuilder.searchSource().filter(FilterBuilders.termFilter('content','elasticsearch')));
    es.indicesApi().warmerPutBuilder().name('es-warmer').searchRequest(request).execute();
    The above example will register the warmer to the indices that are queried (all in this case).

    or as a json object (the warmer will be registered for all indices available)
    es.indicesApi().warmerPutBuilder().name('es-warmer').source({"filter":{"term":{"content":"elasticsearch"}}}).execute();

  InternalIndexClient.warmerPut:
  |
    Allows to register a new warmer for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    The search request needs to be provided as a json object
    es.<index>.warmerPut('es-warmer',{"filter":{"term":{"content":"elasticsearch"}}});

  InternalTypeClient.warmerPut:
  |
    Allows to build a put warmer request for a specific index and type
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    The search request needs to be provided as a json object
    es.<index>.<type>.warmerPut('es-warmer',{"filter":{"term":{"content":"elasticsearch"}}});

  IndicesApiClient.warmerDelete:
  |
    Allows to delete existing warmers
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    Here is an example that deletes a warmer by name
    es.indicesApi().warmerDelete('es-warmer');

    You can also delete all the existing warmers
    es.indicesApi().warmerDelete();

  IndicesApiClient.warmerDeleteBuilder:
  |
    Allows to build a delte warmer request
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    Here is an example that deletes all the warmers for a set of indices
    es.indicesApi().warmerDeleteBuilder().indices('twitter','user').execute();

    You can do the same for a specific warmer (by name)
    es.indicesApi().warmerDeleteBuilder().indices('twitter','user').name('es-warmer').execute();

  InternalIndexClient.warmerDelete:
  |
    Allows to delete an existing warmers for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-indices-warmers/)

    You can either delete all the warmers for the selected index
    es.<index>.warmerDelete();

    or only a specific warmer by name, still for the selected index
    es.<index>.warmerDelete('es-warmer');

  ClusterApiClient.health:
  |
    Retrieves a simple health status of the cluster
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-health/)

    Here is an example
    es.clusterApi().health();

    and here is another one that filters the output for a list of indices
    es.clusterApi().health('twitter','user');

  ClusterApiClient.healthBuilder:
  |
    Allows to build a cluster health request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-health/)

    Here is an example that waits for the green status
    es.clusterApi().healthBuilder().waitForGreenStatus().execute();

    and here is another example that retrieves more details about the shards (for all indices)
    es.clusterApi().healthBuilder().level('shards').execute();

  InternalIndexClient.clusterHealth:
  |
    Retrieves a simple health status of the cluster, for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-health/)

    Here is an example
    es.<index>.clusterHealth();

  InternalIndexClient.clusterHealthBuilder:
  |
    Allows to build a cluster health request for a specific index
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-health/)

    Here is an example that waits for the green status
    es.<index>.clusterHealthBuilder().waitForGreenStatus().execute();

    and here is another example that retrieves more details about the shards (for the selected index)
    es.<index>.clusterHealthBuilder().level('shards').execute();

  ClusterApiClient.state:
  |
    Retrieves a comprehensive state information of the cluster
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-state/)

    Here is an example
    es.clusterApi().state();

  ClusterApiClient.stateBuilder:
  |
    Allows to build a cluster state request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-state/)

    The following example retrieves only the information about the nodes
    es.clusterApi().stateBuilder().filterAll().filterNodes(false).execute();

    The following example retrieves only the information about the indices metadata for two indices
    es.clusterApi().stateBuilder().filterAll().filterMetaData(false).filterIndices('twitter','user').execute();

  InternalIndexClient.clusterState:
  |
    Retrieves a comprehensive state information of the cluster filtering the output for a specific index (where it makes sense)
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-state/)

    Here is an example
    es.<index>.clusterState();

  ClusterApiClient.settingsGet:
  |
    Retrieves a the cluster settings
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-update-settings/)

    Here is an example
    es.clusterApi().settingsGet();

  ClusterApiClient.settingsTransientUpdate:
  |
    Updates transient cluster settings. The changes applied will not survive a full cluster restart.
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-update-settings/)

    Here is an example
    es.clusterApi().settingsTransientUpdate({"cluster.blocks.read_only":false});

  ClusterApiClient.settingsPersistentUpdate:
  |
    Updates persistent cluster settings. The changes applied will survive a cluster restart.
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-update-settings/)

    Here is an example
    es.clusterApi().settingsPersistentUpdate({"cluster.blocks.read_only":false});

  ClusterApiClient.settingsUpdateBuilder:
  |
    Allows to build a cluster update settings request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-update-settings/)

    Here is an example
    es.clusterApi().settingsUpdateBuilder().persistentSettings({"cluster.blocks.read_only":false}).execute();

  ClusterApiClient.nodesInfo:
  |
    Retrieves information about the available cluster nodes
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/)

    Here is an example
    es.clusterApi().nodesInfo();

  ClusterApiClient.nodesInfoBuilder:
  |
    Allows to build a nodes info request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-info/)

    Here is an example that retrieves optional information about plugins
    es.clusterApi().nodesInfoBuilder().plugin(true).execute();

  ClusterApiClient.nodesStats:
  |
    Allows to retrieve one or more cluster nodes statistics
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/)

    Here is an example
    es.clusterApi().nodesStats();

  ClusterApiClient.nodesStatsBuilder:
  |
    Allows to build a nodes stats request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-stats/)

    Here is an example that retrieves optional statistics about the jvm
    es.clusterApi().nodesStatsBuilder().jvm(true).execute();

  ClusterApiClient.nodesHotThreads:
  |
    Allows to get the current hot threads on each node in the cluster
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/)

    Here is an example
    es.clusterApi().nodesHotThreads();

  ClusterApiClient.nodesHotThreadsBuilder:
  |
    Allows to build a nodes hot threads request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-hot-threads/)

    Here is an example that retrieves information for 5 threads that are in wait state
    es.clusterApi().nodesHotThreadsBuilder().type('wait').threads(5).execute();

  ClusterApiClient.nodesShutdown:
  |
    Allows to shutdown cluster nodes
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/)

    The following example stops all nodes over the cluster
    es.clusterApi().nodesShutdown();

  ClusterApiClient.nodesShutdownBuilder:
  |
    Allows to build a nodes shutdown request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/)

    The following example stops all nodes over the cluster with a delay of 10 seconds
    es.clusterApi().nodesShutdownBuilder().delay('10s').execute();

  ClusterApiClient.nodesRestart:
  |
    Allows to restart cluster nodes (if running with the service wrapper)
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/)

    The following example stops all nodes over the cluster
    es.clusterApi().nodesRestart();

  ClusterApiClient.nodesRestartBuilder:
  |
    Allows to build a nodes restart request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-nodes-shutdown/)

    The following example stops all nodes over the cluster with a delay of 10 seconds
    es.clusterApi().nodesRestartBuilder().delay('10s').execute();

  ClusterApiClient.reroute:
  |
    Allows to explicitly execute a cluster reroute allocation command
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-reroute/)

    The commands need to bo provided in json format as in the following example

    var rerouteCommand= {
                            "commands" :[ {
                                "move" :{
                                      "index":"test", "shard":0,
                                      "from_node":"node1", "to_node":"node2"
                                    }
                                },
                                {
                                  "allocate":{
                                      "index":"test", "shard":1, "node":"node3"
                                  }
                                }
                            ]
                        };
    es.clusterApi().reroute(rerouteCommand);

    Switch to the rerouteBuilder method to provide allocations commands in the format supported by the Java API

  ClusterApiClient.rerouteBuilder:
  |
    Allows to build a cluster reroute request
    (http://www.elasticsearch.org/guide/reference/api/admin-cluster-reroute/)

    You can either provide the allocation commands as json object, or using the AllocationCommand classes provided with the Java API
    es.clusterApi().rerouteBuilder().add(new MoveAllocationCommand(new ShardId('test',0),'node1','node2')).execute();
